name: CI
on: [push, pull_request, workflow_dispatch]
env:
  OPENLOCO_BUILD_SERVER: GitHub
  OPENLOCO_VERSION: 22.10
jobs:
  check-code-formatting:
    name: Check code formatting
    runs-on: ubuntu-latest
    container:
      image: openrct2/openrct2-build:8-format
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run clang-format
        run: scripts/check-code-formatting.sh
  windows:
    name: Windows
    runs-on: windows-latest
    needs: check-code-formatting
    env:
      CONFIGURATION: Release
      POWERSHELL_TELEMETRY_OPTOUT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install MSVC problem matcher
        uses: ammaraskar/msvc-problem-matcher@master
      - name: Build OpenLoco
        run: |
            $installPath = vswhere -latest -property installationpath
            $instanceId = vswhere -latest -property instanceid
            Import-Module "$installPath\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
            Enter-VsDevShell $instanceId
            if (-not $env:GITHUB_REF.StartsWith("refs/tags/"))
            {
                $env:OPENLOCO_BRANCH=($env:GITHUB_REF -replace "refs/heads/")
            }
            $env:OPENLOCO_SHA1=$env:GITHUB_SHA
            $env:OPENLOCO_SHA1_SHORT=$env:GITHUB_SHA.Substring(0, 7)
            $env:GIT_DESCRIBE = (git describe HEAD | sed -E "s/-g.+$//")
            Write-Host "%GIT_DESCRIBE% = $env:GIT_DESCRIBE"
            msbuild openloco.sln -m -t:restore
            msbuild openloco.sln -m
      - name: Build artifacts
        run: |
            mkdir artifacts | Out-Null
            Copy-Item CHANGELOG.md,CONTRIBUTORS.md,DEVELOPMENTLOG.md,LICENSE,loco.exe,bin\*.dll,bin\*.pdb artifacts
            Copy-Item data\language artifacts\data\language -Recurse
            Rename-Item artifacts\loco.exe openloco.exe
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: OpenLoco-${{ runner.os }}-Win32
          path: artifacts
          if-no-files-found: error
  windows2:
    name: Windows Cmake
    runs-on: windows-latest
    needs: check-code-formatting
    env:
      CONFIGURATION: Release
      POWERSHELL_TELEMETRY_OPTOUT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Restore artifacts, or setup vcpkg
        uses: lukka/run-vcpkg@v10.4
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: 01b29f6d8212bc845da64773b18665d682f5ab66 
      - name: Build OpenLoco
        shell: cmd
        run: |
          cmake --preset windows-msvc
          cmake --build --preset windows-msvc-release
      - name: Build artifacts
        run: |
          mkdir artifacts | Out-Null
          Copy-Item CHANGELOG.md,CONTRIBUTORS.md,DEVELOPMENTLOG.md,LICENSE,loco.exe,builds\windows-msvc\src\OpenLoco\Release\*.dll,builds\windows-msvc\src\OpenLoco\Release\*.pdb artifacts
          Copy-Item data\language artifacts\data\language -Recurse
          Rename-Item artifacts\loco.exe openloco.exe
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: OpenLoco-${{ runner.os }}-Win32-cmake
          path: artifacts
          if-no-files-found: error
  ubuntu:
    name: Ubuntu ${{ matrix.distro }} ${{ matrix.compiler }} i686
    runs-on: ubuntu-latest
    needs: check-code-formatting
    container: openloco/openloco:4-${{ matrix.distro }}32
    strategy:
      fail-fast: false
      matrix:
        compiler: [g++, clang++]
        distro: [focal, jammy]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Install GCC problem matcher
        uses: ammaraskar/gcc-problem-matcher@master
      - name: Build OpenLoco
        run: |
          cmake --preset linux -DCMAKE_CXX_COMPILER=${{ matrix.compiler }}
          cmake --build --preset linux-release
  fedora:
    name: Fedora shared=${{ matrix.build_shared_libs }} i686 MinGW32
    runs-on: ubuntu-latest
    needs: check-code-formatting
    container: openloco/openloco:4-mingw32
    strategy:
      fail-fast: false
      matrix:
        build_shared_libs: [on, off]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Install GCC problem matcher
        uses: ammaraskar/gcc-problem-matcher@master
      - name: Build OpenLoco
        run: |
          cmake --preset mingw -DBUILD_SHARED_LIBS=${{ matrix.build_shared_libs }}
          cmake --build --preset mingw-release
